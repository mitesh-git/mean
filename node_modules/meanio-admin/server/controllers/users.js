/**
 * Module dependencies.
 */
var mongoose        = require('mongoose'),
    User            = mongoose.model('User'),
    async           = require('async'),
    config          = require('meanio').loadConfig(),
    crypto          = require('crypto'),
    nodemailer      = require('nodemailer'),
    templates       = require('../templates/common'),
    _ = require('lodash');

'use strict';

/**
 * Send email
 */
function sendMail(mailOptions) {
  var transport = nodemailer.createTransport(config.mailer);
  transport.sendMail(mailOptions, function(err, response) {
    if (err) return err;
    return response;
  });
}

/**
 * Create user
 */
exports.create = function (req, res, next) {
  var user = new User(req.body);

  user.provider = 'local';

  // because we set our user.provider to local our models/user.js validation will always be true
  req.assert('first_name', 'You must enter a first name').notEmpty();
  req.assert('last_name', 'You must enter a last name').notEmpty();
  req.assert('birth_date', 'You must enter a date of birth').notEmpty();
  req.assert('email', 'You must enter a valid email address').isEmail();
  req.assert('password', 'Password must be between 8-20 characters long').len(8, 20);
  req.assert('username', 'Username cannot be more than 20 characters').len(1, 20);
  req.assert('confirmPassword', 'Passwords do not match').equals(req.body.password);

  var errors = req.validationErrors();
  console.log(errors);
  if (errors) {
    return res.status(400).send(errors);
  }

  // Hard coded for now. Will address this with the user permissions system in v0.3.5
  // user.roles = ['authenticated']
  user.roles = req.body.roles;
  user.save(function (err) {
    console.log(err);
    if (err) {
      switch (err.code) {
        case 11000:
        case 11001:
          res.status(400).send('Username already taken');
          break;
        default:
          res.status(400).send('Please fill all the required fields');
      }

      return res.status(400);
    }
    res.jsonp(user);
  });
};

/**
 * Find user by id
 */
exports.user = function (req, res, next, id) {
  User
    .findOne({
      _id: id
    })
    .exec(function (err, user) {
      if (err) {
        return next(err);
      }
      if (!user) {
        return next(new Error('Failed to load User ' + id));
      }
      req.profile = user;
      next();
    });
};
/**
 * Update a user
 */
exports.update = function (req, res) {
  var user = req.profile;
  user = _.extend(user, req.body);

  user.save(function (err) {
    res.jsonp(user);
  });
};
/**
 * To send email confirmation email
 */
exports.sendconfirmation = function(req, res, next) {
  async.waterfall([

        function(done) {
          crypto.randomBytes(20, function(err, buf) {
            var token = buf.toString('hex');
            done(err, token);
          });
        },
        function(token, done) {

          User.findOne({
            $or: [{
              email: req.body.email
            }, {
              username: req.body.username
            }]
          }, function(err, user) {
            if (err || !user) return done(true);
            done(err, user, token);
          });

        },
        function(user, token, done) {
          user.EmailConfirmationCode = token;
          user.RequiredEmailConfirmation = true;
          user.save(function(err) {
            done(err, token, user);
          });
        },
        function(token, user, done) {
          var mailOptions = {
            to: user.email,
            from: config.emailFrom
          };
          mailOptions = templates.email_confirmation(user, req, token, mailOptions);
          sendMail(mailOptions);
          done(null, user);
        }
      ],
      function(err, user) {
        var response = {
          message: 'Mail successfully sent',
          status: 'success'
        };
        if (err) {
          response.message = 'User does not exist';
          response.status = 'danger';

        }
        res.json(response);
      });
};

/**
 * Delete an user
 */
exports.destroy = function (req, res) {
  var user = req.profile;

  user.remove(function (err) {
    if (err) {
      res.render('error', {
        status: 500
      });
    } else {
      res.jsonp(user);
    }
  });
};

/**
 * List of Users
 */
exports.all = function (req, res) {
  User.find().sort('-created').populate('user', 'name username').exec(function (err, users) {
    if (err) {
      res.render('error', {
        status: 500
      });
    } else {
      res.jsonp(users);
    }
  });
};
