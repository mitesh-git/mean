'use strict';

angular.module('mean.users')
  .controller('AuthCtrl', ['$scope', '$rootScope', '$http', '$state', 'Global',
    function($scope, $rootScope, $http, $state, Global) {
      // This object will contain list of available social buttons to authorize
      $scope.socialButtonsCounter = 0;
      $scope.global = Global;
      $scope.$state = $state;

      $http.get('/api/get-config')
        .then(function(response) {
          var config = response.data;
          if(config.hasOwnProperty('local')) delete config.local; // Only non-local passport strategies
          $scope.socialButtons = config;
          $scope.socialButtonsCounter = Object.keys(config).length;
        });
    }
  ])
  .controller('LoginCtrl', ['$rootScope', 'MeanUser',
    function($rootScope, MeanUser) {
      var vm = this;

      // This object will be filled by the form
      vm.user = {};



      vm.input = {
        type: 'password',
        placeholder: 'Password',
        confirmPlaceholder: 'Repeat Password',
        iconClass: '',
        tooltipText: 'Show password'
      };

      vm.togglePasswordVisible = function() {
        vm.input.type = vm.input.type === 'text' ? 'password' : 'text';
        vm.input.placeholder = vm.input.placeholder === 'Password' ? 'Visible Password' : 'Password';
        vm.input.iconClass = vm.input.iconClass === 'icon_hide_password' ? '' : 'icon_hide_password';
        vm.input.tooltipText = vm.input.tooltipText === 'Show password' ? 'Hide password' : 'Show password';
      };

      $rootScope.$on('loginfailed', function(){
        vm.loginError = MeanUser.loginError;
      });

      // Register the login() function
      vm.login = function() {
        MeanUser.login(this.user);
      };
    }
  ])
  .controller('RegisterCtrl', ['$scope','$rootScope', 'MeanUser','$http','vcRecaptchaService',
    function($scope, $rootScope, MeanUser,$http, vcRecaptchaService) {
      var vm = this;
      var widgetId;
      var valid;
      vm.user = {};

      //vm.recaptcha = {};
      vm.recaptcha_response = null;
      vm.recaptcha_widgetId = null;

      vm.recaptchaConfig = {};

      vm.registerForm = MeanUser.registerForm = true;


        /*$http.get('/api/capcha')
        .then(function(response) {
            $scope.recaptcha = response;
            vm.recaptchaConfig = $scope.recaptcha.data;
        })
        .catch(function(response) {
            //$scope.recaptcha = {};
            console.log('error');
            console.log(response);
        });
*/

        vm.recaptchaConfig.key = '6LcpAicUAAAAABnTkZZWK33uBWeHU5ESqtxB77KQ';

       /* vcRecaptchaService.reload(widgetId);*/

        vm.onWidgetCreate = function(_widgetId){
            vm.recaptcha_widgetId = _widgetId;
        };


      vm.setResponse = function (response) {
          console.info('Response available');
          vm.recaptcha_response = response;
      };
      vm.setWidgetId = function (widgetId) {
          console.info('Created widget ID: %s', widgetId);
          vm.recaptcha_widgetId = widgetId;
      };
      vm.cbExpiration = function() {
          console.info('Captcha expired. Resetting response object');
          vcRecaptchaService.reload($scope.recaptcha_widgetId);
          vm.recaptcha_response = null;
      };


      vm.input = {
        type: 'password',
        placeholder: 'Password',
        placeholderConfirmPass: 'Repeat Password',
        iconClassConfirmPass: '',
        tooltipText: 'Show password',
        tooltipTextConfirmPass: 'Show password'
      };

      vm.togglePasswordVisible = function() {
        vm.input.type = vm.input.type === 'text' ? 'password' : 'text';
        vm.input.placeholder = vm.input.placeholder === 'Password' ? 'Visible Password' : 'Password';
        vm.input.iconClass = vm.input.iconClass === 'icon_hide_password' ? '' : 'icon_hide_password';
        vm.input.tooltipText = vm.input.tooltipText === 'Show password' ? 'Hide password' : 'Show password';
      };
      vm.togglePasswordConfirmVisible = function() {
        vm.input.type = vm.input.type === 'text' ? 'password' : 'text';
        vm.input.placeholderConfirmPass = vm.input.placeholderConfirmPass === 'Repeat Password' ? 'Visible Password' : 'Repeat Password';
        vm.input.iconClassConfirmPass = vm.input.iconClassConfirmPass === 'icon_hide_password' ? '' : 'icon_hide_password';
        vm.input.tooltipTextConfirmPass = vm.input.tooltipTextConfirmPass === 'Show password' ? 'Hide password' : 'Show password';
      };

      // Register the register() function
      vm.register = function() {
          console.log(this.recaptcha_response);
          if(this.recaptcha_response === ""){ //if string is empty
              alert("Please resolve the captcha and submit!")
              vcRecaptchaService.reload(vm.recaptcha_widgetId);
          }else {
              MeanUser.register(this.user,this.recaptcha_response);
          }
      };

      vm.myDate = new Date();

      vm.minDate = new Date(
          vm.myDate.getFullYear(),
          vm.myDate.getMonth(),
          vm.myDate.getDate() - 2);

      vm.maxDate = new Date(
          vm.myDate.getFullYear(),
          vm.myDate.getMonth(),
          vm.myDate.getDate() + 2);

      $rootScope.$on('registerfailed', function(){
        vm.registerError = MeanUser.registerError;
      });
    }
  ])
  .controller('ForgotPasswordCtrl', ['MeanUser', '$rootScope',
    function(MeanUser, $rootScope) {
      var vm = this;
      vm.user = {};
      vm.registerForm = MeanUser.registerForm = false;
      vm.forgotpassword = function() {
        MeanUser.forgotpassword(this.user);
      };
      $rootScope.$on('forgotmailsent', function(event, args){
        vm.response = args;
      });
    }
  ])
  .controller('ResetPasswordCtrl', ['MeanUser','$rootScope',
    function(MeanUser,$rootScope) {
      var vm = this;
      vm.user = {};
      vm.registerForm = MeanUser.registerForm = false;
      vm.resetpassword = function() {
        MeanUser.resetpassword(this.user);
      };
      $rootScope.$on('resetpasswordfailed', function(){
          console.log(MeanUser.resetpassworderror);
          vm.resetpassworderror = MeanUser.resetpassworderror;
      });
    }
  ]);
